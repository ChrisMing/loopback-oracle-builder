#!/bin/bash

thisdir=$(dirname "${BASH_SOURCE[0]}")
export BUILD_PACKAGE="loopback-oracle"

ORA_PACKAGES_DIR=$(cd -P -- "$thisdir/../deps/oracle" && pwd -P)

BUILD_ARCH="Unknown"
BUILD_PLATFORM="Unknown"

#
#  Print error message and exit with the specified code.
#
#  Examples:
#    die 'This sucks!' 101
#
function die() {
  [ -n "$1" ] && echo "$1"
  exit ${2:-"-1"}

}  #  End of function  die.


#
#  Prints the specified message - formatted.
#
#  Examples:
#    print_message "Initializing ..."
#
function print_message() {
  # echo "$@" | sed "s/^/\t/"
  if [ -n "$@" ]; then
    echo "  $@"
  else
    echo ""
  fi

  return 0

}  #  End of function  print_message.


#
#  Print env variables for package, version, platform, os and architecture.
#
#  Examples:
#    print_env_variables
#
function print_env_variables() {
   print_message "-  Package = $BUILD_PACKAGE"
   print_message "-  Version = $BUILD_VERSION"
   print_message "- Platform = $BUILD_PLATFORM"
   print_message "-     Arch = $BUILD_ARCH"
   print_message "-   Module = $NODE_ORACLE_MODULE"

}  #  End of function  print_env_variables.


#
#
#  Detects the platform we are running the build on.
#
#  Examples:
#    detect_platform
#
function detect_platform() {
  info=$(node ../lib/detect.js)

  export BUILD_PLATFORM=$(echo $info|cut -f1 -d ' ')
  export BUILD_ARCH=$(echo $info|cut -f2 -d ' ')
  export BUILD_VERSION=$(echo $info|cut -f3 -d ' ')
  export BUILD_DRIVER_VERSION=$(echo $info|cut -f4 -d ' ')

  if which -s git; then
    export NODE_ORACLE_MODULE="strongloop/node-oracle#$BUILD_DRIVER_VERSION"
  else
    export NODE_ORACLE_MODULE="http://github.com/strongloop/node-oracle/tarball/$BUILD_DRIVER_VERSION"
  fi

  if [ -z $1 ]; then
    print_env_variables
  fi
  return 0

}  #  End of function  detect_platform.


